name: Full DevSecOps Pipeline

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main ]
  pull_request:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/devsecops-app
  TAG: ${{ github.sha }}

jobs:

  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - run: pip install flake8 black
      - run: flake8 app tests src --max-line-length=100
      - run: black --check .

  tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - run: pip install -r requirements.txt pytest pytest-cov
      - run: pytest --cov=app tests/

  sast:
    name: SAST - CodeQL
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: python
          paths: app, tests, src
      - uses: github/codeql-action/analyze@v3

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - uses: actions/checkout@v4
      - uses: trufflesecurity/trufflehog@v2.0.0
        with:
          path: ./
          github_token: ${{ secrets.GITHUB_TOKEN }}

  docker-build-scan-push:
    name: Docker Build, Scan & Push
    runs-on: ubuntu-latest
    needs: secrets-scan
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE:$TAG .
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@v0.24.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.TAG }}
          severity: HIGH,CRITICAL
      - name: Push Docker image
        run: docker push $DOCKER_IMAGE:$TAG

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build-scan-push
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "Deploying $DOCKER_IMAGE:$TAG to staging..."
          # kubectl set image deployment/app app=$DOCKER_IMAGE:$TAG --namespace=staging

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "Deploying $DOCKER_IMAGE:$TAG to production..."
          # kubectl set image deployment/app app=$DOCKER_IMAGE:$TAG --namespace=prod
